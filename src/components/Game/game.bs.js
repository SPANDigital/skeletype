// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as Cn from "re-classnames/src/Cn.bs.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as ArrayLabels from "bs-platform/lib/es6/arrayLabels.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Row$ReasonScripts from "./Elements/Row.bs.js";
import * as Word$ReasonScripts from "./Elements/Word.bs.js";
import * as Helpers$ReasonScripts from "../../utils/Helpers.bs.js";
import * as Skeleton$ReasonScripts from "./Elements/Skeleton.bs.js";
import * as Dictionary$ReasonScripts from "./Elements/Dictionary.bs.js";

((require('./game.css')));

function laneToInt(lane) {
  return lane + 1 | 0;
}

function setSectionRef(theRef, param) {
  param[/* state */1][/* refTextField */6][0] = (theRef == null) ? /* None */0 : [theRef];
  return /* () */0;
}

function fillWords() {
  var wordTop = /* record */[
    /* randomWord */"yo",
    /* wordLane : Top */0
  ];
  var wordMiddle = /* record */[
    /* randomWord */"hey",
    /* wordLane : Middle */1
  ];
  var wordBottom = /* record */[
    /* randomWord */"wow",
    /* wordLane : Bottom */2
  ];
  return /* array */[
          wordTop,
          wordMiddle,
          wordBottom
        ];
}

var gameComponent = ReasonReact.reducerComponent("Game");

function make() {
  return /* record */[
          /* debugName */gameComponent[/* debugName */0],
          /* reactClassInternal */gameComponent[/* reactClassInternal */1],
          /* handedOffState */gameComponent[/* handedOffState */2],
          /* willReceiveProps */gameComponent[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var intervalId = /* Some */[setInterval((function () {
                        return Curry._1(self[/* send */3], /* Countdown */2);
                      }), 1000)];
              self[/* state */1][/* intervalId */1][0] = intervalId;
              return /* () */0;
            }),
          /* didUpdate */(function (param) {
              var match = param[/* newSelf */1][/* state */1][/* refTextField */6][0];
              if (match) {
                match[0].focus();
                return /* () */0;
              } else {
                return /* () */0;
              }
            }),
          /* willUnmount */(function (self) {
              var match = self[/* state */1][/* intervalId */1][0];
              if (match) {
                clearInterval(match[0]);
                return /* () */0;
              } else {
                return /* () */0;
              }
            }),
          /* willUpdate */gameComponent[/* willUpdate */7],
          /* shouldUpdate */gameComponent[/* shouldUpdate */8],
          /* render */(function (param) {
              var state = param[/* state */1];
              var input = state[/* input */5];
              var time = state[/* time */0];
              var send = param[/* send */3];
              return React.createElement("div", {
                          className: "world"
                        }, React.createElement("div", {
                              className: "layout"
                            }, React.createElement("div", {
                                  className: Cn.make(/* :: */[
                                        "countdown",
                                        /* :: */[
                                          Cn.ifTrue(state[/* countdown */3] <= 0, "done"),
                                          /* [] */0
                                        ]
                                      ])
                                }, String(state[/* countdown */3])), React.createElement("div", {
                                  className: "header"
                                }, React.createElement("div", {
                                      className: "begging"
                                    }, "SKELETYPE"), React.createElement("div", {
                                      className: "middle"
                                    }, String(time)), React.createElement("div", {
                                      className: "end"
                                    }, "X")), React.createElement("div", {
                                  className: "menu"
                                }, $$Array.mapi((function (_, word) {
                                        return ReasonReact.element(/* None */0, /* None */0, Word$ReasonScripts.make(word[/* randomWord */0], input, /* array */[]));
                                      }), state[/* words */4])), React.createElement("div", {
                                  className: "content"
                                }, $$Array.mapi((function (i, skeleton) {
                                        return ReasonReact.element(/* Some */["skeleton-" + (String(i) + "")], /* None */0, Skeleton$ReasonScripts.make(time, skeleton[/* startTime */0], skeleton[/* deathTime */2], skeleton[/* lane */1] + 1 | 0, skeleton[/* status */3], /* array */[]));
                                      }), state[/* skeletons */2]), ReasonReact.element(/* None */0, /* None */0, Row$ReasonScripts.make("1", /* array */[])), ReasonReact.element(/* None */0, /* None */0, Row$ReasonScripts.make("2", /* array */[])), ReasonReact.element(/* None */0, /* None */0, Row$ReasonScripts.make("3", /* array */[]))), React.createElement("div", {
                                  className: "footer"
                                }, React.createElement("input", {
                                      ref: Curry._1(param[/* handle */0], setSectionRef),
                                      value: state[/* input */5],
                                      onChange: (function ($$event) {
                                          return Curry._1(send, /* ProcessInput */Block.__(0, [$$event.target.value]));
                                        })
                                    }))));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* time */0,
                      /* intervalId */[/* None */0],
                      /* skeletons : array */[],
                      /* countdown */5,
                      /* words */fillWords(/* () */0),
                      /* input */"",
                      /* refTextField */[/* None */0]
                    ];
            }),
          /* retainedProps */gameComponent[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* time */state[/* time */0] + 1 | 0,
                                  /* intervalId */state[/* intervalId */1],
                                  /* skeletons */state[/* skeletons */2],
                                  /* countdown */state[/* countdown */3],
                                  /* words */state[/* words */4],
                                  /* input */state[/* input */5],
                                  /* refTextField */state[/* refTextField */6]
                                ],
                                (function (self) {
                                    if (state[/* time */0] === 0) {
                                      return Curry._1(self[/* send */3], /* SpawnSkeleton */Block.__(3, [
                                                    state[/* time */0],
                                                    /* Top */0
                                                  ]));
                                    } else if (state[/* time */0] % 100 === 0) {
                                      var occupiedLanes = ArrayLabels.map((function (s) {
                                              return s[/* lane */1];
                                            }), state[/* skeletons */2]);
                                      var deployedLane = /* Top */0;
                                      if (occupiedLanes.length !== 3) {
                                        if (!Helpers$ReasonScripts.contains(/* Top */0, occupiedLanes)) {
                                          deployedLane = /* Top */0;
                                        }
                                        if (!Helpers$ReasonScripts.contains(/* Middle */1, occupiedLanes)) {
                                          deployedLane = /* Middle */1;
                                        }
                                        if (!Helpers$ReasonScripts.contains(/* Bottom */2, occupiedLanes)) {
                                          deployedLane = /* Bottom */2;
                                        }
                                        return Curry._1(self[/* send */3], /* SpawnSkeleton */Block.__(3, [
                                                      state[/* time */0],
                                                      deployedLane
                                                    ]));
                                      } else {
                                        return 0;
                                      }
                                    } else {
                                      return 0;
                                    }
                                  })
                              ]);
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* time */state[/* time */0],
                                  /* intervalId */state[/* intervalId */1],
                                  /* skeletons */state[/* skeletons */2],
                                  /* countdown */state[/* countdown */3],
                                  /* words */state[/* words */4],
                                  /* input */"",
                                  /* refTextField */state[/* refTextField */6]
                                ]]);
                  case 2 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* time */state[/* time */0],
                                  /* intervalId */state[/* intervalId */1],
                                  /* skeletons */state[/* skeletons */2],
                                  /* countdown */state[/* countdown */3] - 1 | 0,
                                  /* words */state[/* words */4],
                                  /* input */state[/* input */5],
                                  /* refTextField */state[/* refTextField */6]
                                ],
                                (function (self) {
                                    if (self[/* state */1][/* countdown */3] === 0) {
                                      return Curry._1(self[/* send */3], /* StartGame */3);
                                    } else {
                                      return 0;
                                    }
                                  })
                              ]);
                  case 3 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var intervalId = /* Some */[setInterval((function () {
                                              return Curry._1(self[/* send */3], /* Tick */0);
                                            }), 25)];
                                    self[/* state */1][/* intervalId */1][0] = intervalId;
                                    return /* () */0;
                                  })]);
                  
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* time */state[/* time */0],
                                  /* intervalId */state[/* intervalId */1],
                                  /* skeletons */state[/* skeletons */2],
                                  /* countdown */state[/* countdown */3],
                                  /* words */state[/* words */4],
                                  /* input */action[0],
                                  /* refTextField */state[/* refTextField */6]
                                ],
                                (function (self) {
                                    if (self[/* state */1][/* input */5].length > 0) {
                                      var matchedWord = Helpers$ReasonScripts.filter((function (x) {
                                              return x[/* randomWord */0] === self[/* state */1][/* input */5];
                                            }), state[/* words */4]);
                                      if (matchedWord.length) {
                                        var targetWord = Caml_array.caml_array_get(matchedWord, 0)[/* randomWord */0];
                                        var targetLane = Caml_array.caml_array_get(matchedWord, 0)[/* wordLane */1];
                                        Curry._1(self[/* send */3], /* ReplaceWord */Block.__(2, [
                                                targetWord,
                                                Dictionary$ReasonScripts.getRandomWord(/* () */0)
                                              ]));
                                        Curry._1(self[/* send */3], /* KillSkeleton */Block.__(4, [
                                                self[/* state */1][/* time */0],
                                                targetLane
                                              ]));
                                        return Curry._1(self[/* send */3], /* ClearInput */1);
                                      } else {
                                        return 0;
                                      }
                                    } else {
                                      return 0;
                                    }
                                  })
                              ]);
                  case 1 : 
                      var wordLane = action[1];
                      var word = /* record */[
                        /* randomWord */action[0],
                        /* wordLane */wordLane
                      ];
                      var existingWords = state[/* words */4];
                      switch (wordLane) {
                        case 0 : 
                            Caml_array.caml_array_set(existingWords, 0, word);
                            break;
                        case 1 : 
                            Caml_array.caml_array_set(existingWords, 1, word);
                            break;
                        case 2 : 
                            Caml_array.caml_array_set(existingWords, 2, word);
                            break;
                        
                      }
                      return /* Update */Block.__(0, [/* record */[
                                  /* time */state[/* time */0],
                                  /* intervalId */state[/* intervalId */1],
                                  /* skeletons */state[/* skeletons */2],
                                  /* countdown */state[/* countdown */3],
                                  /* words */existingWords,
                                  /* input */state[/* input */5],
                                  /* refTextField */state[/* refTextField */6]
                                ]]);
                  case 2 : 
                      var oldWord = action[0];
                      var updatedWords = state[/* words */4];
                      if (updatedWords.length) {
                        var entryToReplace = Helpers$ReasonScripts.find((function (x) {
                                return x[/* randomWord */0] === oldWord;
                              }), updatedWords);
                        entryToReplace[/* randomWord */0] = action[1];
                      }
                      return /* Update */Block.__(0, [/* record */[
                                  /* time */state[/* time */0],
                                  /* intervalId */state[/* intervalId */1],
                                  /* skeletons */state[/* skeletons */2],
                                  /* countdown */state[/* countdown */3],
                                  /* words */updatedWords,
                                  /* input */state[/* input */5],
                                  /* refTextField */state[/* refTextField */6]
                                ]]);
                  case 3 : 
                      var skeleton = /* record */[
                        /* startTime */action[0],
                        /* lane */action[1],
                        /* deathTime */0,
                        /* status : Walking */0
                      ];
                      var existingSkeletons = ArrayLabels.to_list(state[/* skeletons */2]);
                      var updatedSkeletons = ArrayLabels.of_list(/* :: */[
                            skeleton,
                            existingSkeletons
                          ]);
                      return /* Update */Block.__(0, [/* record */[
                                  /* time */state[/* time */0],
                                  /* intervalId */state[/* intervalId */1],
                                  /* skeletons */updatedSkeletons,
                                  /* countdown */state[/* countdown */3],
                                  /* words */state[/* words */4],
                                  /* input */state[/* input */5],
                                  /* refTextField */state[/* refTextField */6]
                                ]]);
                  case 4 : 
                      var lane = action[1];
                      var skeleton$1 = Helpers$ReasonScripts.find((function (x) {
                              return x[/* lane */1] === lane;
                            }), state[/* skeletons */2]);
                      skeleton$1[/* status */3] = /* Dying */2;
                      skeleton$1[/* deathTime */2] = state[/* time */0] - skeleton$1[/* startTime */0] | 0;
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* time */state[/* time */0],
                                  /* intervalId */state[/* intervalId */1],
                                  /* skeletons */state[/* skeletons */2],
                                  /* countdown */state[/* countdown */3],
                                  /* words */state[/* words */4],
                                  /* input */state[/* input */5],
                                  /* refTextField */state[/* refTextField */6]
                                ],
                                (function (self) {
                                    setTimeout((function () {
                                            return Curry._1(self[/* send */3], /* FlagSkeletonAsDead */Block.__(5, [lane]));
                                          }), 1000);
                                    return /* () */0;
                                  })
                              ]);
                  case 5 : 
                      var lane$1 = action[0];
                      var skeleton$2 = Helpers$ReasonScripts.find((function (x) {
                              return x[/* lane */1] === lane$1;
                            }), state[/* skeletons */2]);
                      skeleton$2[/* status */3] = /* Dead */3;
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* time */state[/* time */0],
                                  /* intervalId */state[/* intervalId */1],
                                  /* skeletons */state[/* skeletons */2],
                                  /* countdown */state[/* countdown */3],
                                  /* words */state[/* words */4],
                                  /* input */state[/* input */5],
                                  /* refTextField */state[/* refTextField */6]
                                ],
                                (function (self) {
                                    setTimeout((function () {
                                            return Curry._1(self[/* send */3], /* RemoveSkeleton */Block.__(6, [lane$1]));
                                          }), 1000);
                                    return /* () */0;
                                  })
                              ]);
                  case 6 : 
                      var lane$2 = action[0];
                      var remainingSkeletons = Helpers$ReasonScripts.filter((function (x) {
                              return x[/* lane */1] !== lane$2;
                            }), state[/* skeletons */2]);
                      return /* Update */Block.__(0, [/* record */[
                                  /* time */state[/* time */0],
                                  /* intervalId */state[/* intervalId */1],
                                  /* skeletons */remainingSkeletons,
                                  /* countdown */state[/* countdown */3],
                                  /* words */state[/* words */4],
                                  /* input */state[/* input */5],
                                  /* refTextField */state[/* refTextField */6]
                                ]]);
                  
                }
              }
            }),
          /* subscriptions */gameComponent[/* subscriptions */13],
          /* jsElementWrapped */gameComponent[/* jsElementWrapped */14]
        ];
}

export {
  laneToInt ,
  setSectionRef ,
  fillWords ,
  gameComponent ,
  make ,
  
}
/*  Not a pure module */
